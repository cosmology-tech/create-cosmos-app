"use strict";
/**
* This file and any referenced files were automatically generated by @cosmology/telescope@1.3.2
* DO NOT MODIFY BY HAND. Instead, download the latest proto files for your chain
* and run the transpile command or yarn proto command to regenerate this bundle.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryStore = void 0;
const mobx_1 = require("mobx");
class QueryStore {
    state;
    request;
    response;
    fetchFunc;
    constructor(fetchFunc) {
        this.fetchFunc = fetchFunc;
        (0, mobx_1.makeAutoObservable)(this);
    }
    get isLoading() {
        return this.state === 'loading';
    }
    get isSuccess() {
        return this.state === 'success';
    }
    refetch = async () => {
        (0, mobx_1.runInAction)(() => {
            this.response = void 0;
            this.state = 'loading';
        });
        try {
            if (!this.fetchFunc)
                throw new Error('Query Service not initialized or request function not implemented');
            if (!this.request)
                throw new Error('Request not provided');
            const response = await this.fetchFunc(this.request);
            (0, mobx_1.runInAction)(() => {
                this.response = response;
                this.state = 'success';
            });
            console.log('%cquery.rpc.Query.ts line:572 this.state', 'color: #007acc;', this.state, this.response);
        }
        catch (e) {
            console.error(e);
            (0, mobx_1.runInAction)(() => {
                this.state = 'error';
            });
        }
    };
    getData(request) {
        (0, mobx_1.runInAction)(() => {
            this.request = request;
        });
        return {
            data: this.response,
            isSuccess: this.isSuccess,
            isLoading: this.isLoading,
            refetch: this.refetch,
        };
    }
}
exports.QueryStore = QueryStore;
