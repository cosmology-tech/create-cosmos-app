/**
 * This file and any referenced files were automatically generated by @cosmology/telescope@0.106.0
 * DO NOT MODIFY BY HAND. Instead, download the latest proto files for your chain
 * and run the transpile command or yarn proto command to regenerate this bundle.
 */

import {
  QueryClient,
  createProtobufRpcClient,
  ProtobufRpcClient,
} from '@cosmjs/stargate';
import {
  Tendermint34Client,
  HttpEndpoint,
  BroadcastTxAsyncResponse,
  BroadcastTxSyncResponse,
  BroadcastTxCommitResponse,
  BroadcastTxParams,
} from '@cosmjs/tendermint-rpc';
import { Rpc } from './helpers';

const _rpcClients: Record<string, ProtobufRpcClient> = {};

export const getRpcEndpointKey = (rpcEndpoint: string | HttpEndpoint) => {
  if (typeof rpcEndpoint === 'string') {
    return rpcEndpoint;
  } else if (!!rpcEndpoint) {
    //@ts-ignore
    return rpcEndpoint.url;
  }
};

export const getRpcClient = async (rpcEndpoint: string | HttpEndpoint) => {
  const key = getRpcEndpointKey(rpcEndpoint);
  if (!key) return;
  if (_rpcClients.hasOwnProperty(key)) {
    return _rpcClients[key];
  }
  const tmClient = await Tendermint34Client.connect(rpcEndpoint);
  //@ts-ignore
  const client = new QueryClient(tmClient);
  const rpc: IRpc = createProtobufRpcClient(client);
  rpc.client = tmClient;
  _rpcClients[key] = rpc;
  return rpc;
};

export interface IRpc extends Rpc {
  client?: IBroadcastClient;
}

export interface IBroadcastClient {
  /**
   * Broadcast transaction to mempool and wait for response
   */
  broadcastTxSync(params: BroadcastTxParams): Promise<BroadcastTxSyncResponse>;
  /**
   * Broadcast transaction to mempool and do not wait for result
   */
  broadcastTxAsync(
    params: BroadcastTxParams
  ): Promise<BroadcastTxAsyncResponse>;
  /**
   * Broadcast transaction to mempool and wait for block
   */
  broadcastTxCommit(
    params: BroadcastTxParams
  ): Promise<BroadcastTxCommitResponse>;
}
