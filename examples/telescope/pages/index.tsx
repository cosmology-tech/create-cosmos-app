import { useState } from 'react';
import Head from 'next/head';
import { useChain } from '@cosmos-kit/react';
import { StdFee } from '@cosmjs/amino';
import { SigningStargateClient } from '@cosmjs/stargate';
import BigNumber from 'bignumber.js';

import {
  Box,
  Button,
  Center,
  Container,
  Divider,
  Icon,
  Link,
  Stack,
  Text,
  useColorModeValue,
  useTheme
} from '@interchain-ui/react';
import {
  chainassets,
  chainName,
  coin,
  dependencies,
  products,
} from '../config';

import { WalletStatus } from 'cosmos-kit';
import {
  Dependency,
  Product,
  WalletSection,
} from '../components';
import { SendTokensCard } from '../components/react/send-tokens-card';

import { cosmos, createRpcQueryHooks } from '../src/codegen';
import { useRpcClient } from '../src/codegen';

const library = {
  title: 'Telescope',
  text: 'telescope',
  href: 'https://github.com/cosmology-tech/telescope',
};

const sendTokens = (
  getSigningStargateClient: () => Promise<SigningStargateClient>,
  setResp: (resp: string) => any,
  address: string
) => {
  return async () => {
    const stargateClient = await getSigningStargateClient();
    if (!stargateClient || !address) {
      console.error('stargateClient undefined or address undefined.');
      return;
    }

    const { send } = cosmos.bank.v1beta1.MessageComposer.withTypeUrl;

    const msg = send({
      amount: [
        {
          denom: coin.base,
          amount: '1000',
        },
      ],
      toAddress: address,
      fromAddress: address,
    });

    const fee: StdFee = {
      amount: [
        {
          denom: coin.base,
          amount: '2000',
        },
      ],
      gas: '86364',
    };
    const response = await stargateClient.signAndBroadcast(address, [msg], fee);
    setResp(JSON.stringify(response, null, 2));
  };
};

// Get the display exponent
// we can get the exponent from chain registry asset denom_units
const COIN_DISPLAY_EXPONENT = coin.denom_units.find(
  (unit) => unit.denom === coin.display
)?.exponent as number;

export default function Home() {
  const { theme, setTheme } = useTheme();

  const toggleColorMode = () => {
    setTheme(theme === 'light' ? 'dark' : 'light');
  };

  const { getSigningStargateClient, address, status, getRpcEndpoint } =
    useChain(chainName);

  const [resp, setResp] = useState('');

  const rpcEndpoint = 'https://rpc.cosmos.directory/cosmoshub';

  const { data: rpcClient } = useRpcClient({
    rpcEndpoint,
    options: {
      enabled: !!rpcEndpoint,
    },
  });

  console.log({
    rpcEndpoint,
    rpcClient,
  });

  //@ts-ignore
  const hooks = createRpcQueryHooks({ rpc: rpcClient });

  const {
    data: balance,
    isSuccess: isBalanceLoaded,
    isLoading: isFetchingBalance,
    refetch: refetchBalance,
  } = hooks.useBalance({
    request: {
      address: address || '',
      denom: chainassets?.assets[0].base as string,
    },
    options: {
      enabled: !!address && !!rpcClient,
      // transform the returned balance into a BigNumber
      select: ({ balance }) =>
        new BigNumber(balance?.amount ?? 0).multipliedBy(
          10 ** -COIN_DISPLAY_EXPONENT
        ),
    },
  });

  console.log(
    JSON.stringify(
      {
        address,
        balance,
        isBalanceLoaded,
        isFetchingBalance,
        refetchBalance,
      },
      null,
      2
    )
  );

  return (
    <Container maxWidth='$3' attributes={{
      paddingY: 10,
    }}>
      <Head>
        <title>Create Cosmos App</title>
        <meta name="description" content="Generated by create cosmos app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {/* @ts-ignore */}
      <Box justifyContent="end" mb={4} display='flex'>
        <Button variant="outlined" onClick={toggleColorMode}>
          <Icon name={useColorModeValue('moonLine', 'sunLine')} />
        </Button>
      </Box>
      {/* @ts-ignore */}
      <Box textAlign="center">
        <Text
          as="h1"
          fontSize={{ mobile: '$2', mdMobile: '5xl' }}
          fontWeight="extrabold"
          attributes={{ marginBottom: 3 }}
        >
          Create Cosmos App
        </Text>
        <Text
          as="h1"
          fontWeight="bold"
          fontSize={{ mobile: '$2xl', mdMobile: '$4xl' }}
        >
          <Text as="span">Welcome to&nbsp;</Text>
          <Text
            as="span"
          >
            Cosmos Kit&nbsp;+&nbsp;Next.js&nbsp;+&nbsp;
            <Link href={library.href} target="_blank" rel="noreferrer">
              {library.title}
            </Link>
          </Text>
        </Text>
      </Box>

      {/* @ts-ignore */}
      <WalletSection />

      <Center
        attributes={{
          marginBottom: 16,
        }}
      >
        {/* @ts-ignore */}
        <SendTokensCard
          isConnectWallet={status === WalletStatus.Connected}
          balance={isBalanceLoaded ? balance.toNumber() : 0}
          isFetchingBalance={isFetchingBalance}
          response={resp}
          sendTokensButtonText="Send Tokens"
          handleClickSendTokens={sendTokens(
            // @ts-ignore
            getSigningStargateClient as () => Promise<SigningStargateClient>,
            setResp as () => any,
            address as string
          )}
          handleClickGetBalance={refetchBalance}
        />
      </Center>
      {/* @ts-ignore */}
      <Box mb={16}>
        <Divider />
      </Box>
      {/* @ts-ignore */}
      <Box display='grid'
        gridTemplateColumns={{
          mobile: 'repeat(2, 1fr)',
          mdMobile: 'repeat(3, 1fr)',
        }}
        gap={8}
        mb={14}
      >
        {products.map((product) => (
          // @ts-ignore
          <Product key={product.title} {...product} />
        ))}
      </Box>
      {/* @ts-ignore */}
      <Box display='grid'
        gridTemplateColumns={{ mdMobile: 'repeat(3, 1fr)' }} gap={8} mb={20}
      >
        {/* @ts-ignore */}
        <Dependency {...library} />
        {dependencies.map((dependency) => (
          // @ts-ignore
          <Dependency
            key={dependency.title} {...dependency}
          />
        ))}
      </Box>
      {/* @ts-ignore */}
      <Box mb={3}>
        <Divider />
      </Box>
      <Stack
        direction="horizontal"
        space={1}
        attributes={{
          justifyContent: 'center',
          opacity: 0.5,
          fontSize: 'sm',
        }}
      >
        <Text>Built with</Text>
        <Link
          href="https://cosmology.zone/"
          target="_blank"
          rel="noopener noreferrer"
        >
          Cosmology
        </Link>
      </Stack>
    </Container>
  );
}
