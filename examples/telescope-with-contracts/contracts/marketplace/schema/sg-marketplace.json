{
  "contract_name": "sg-marketplace",
  "contract_version": "1.3.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "ask_expiry",
      "bid_expiry",
      "bid_removal_reward_bps",
      "listing_fee",
      "max_finders_fee_bps",
      "min_price",
      "operators",
      "stale_bid_duration",
      "trading_fee_bps"
    ],
    "properties": {
      "ask_expiry": {
        "description": "Valid time range for Asks (min, max) in seconds",
        "allOf": [
          {
            "$ref": "#/definitions/ExpiryRange"
          }
        ]
      },
      "bid_expiry": {
        "description": "Valid time range for Bids (min, max) in seconds",
        "allOf": [
          {
            "$ref": "#/definitions/ExpiryRange"
          }
        ]
      },
      "bid_removal_reward_bps": {
        "description": "Stale bid removal reward",
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "listing_fee": {
        "description": "Listing fee to reduce spam",
        "allOf": [
          {
            "$ref": "#/definitions/Uint128"
          }
        ]
      },
      "max_finders_fee_bps": {
        "description": "Max basis points for the finders fee",
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "min_price": {
        "description": "Min value for bids and asks",
        "allOf": [
          {
            "$ref": "#/definitions/Uint128"
          }
        ]
      },
      "operators": {
        "description": "Operators are entites that are responsible for maintaining the active state of Asks. They listen to NFT transfer events, and update the active state of Asks.",
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "sale_hook": {
        "description": "The address of the airdrop claim contract to detect sales",
        "type": [
          "string",
          "null"
        ]
      },
      "stale_bid_duration": {
        "description": "Duration after expiry when a bid becomes stale (in seconds)",
        "allOf": [
          {
            "$ref": "#/definitions/Duration"
          }
        ]
      },
      "trading_fee_bps": {
        "description": "Fair Burn fee for winning bids 0.25% = 25, 0.5% = 50, 1% = 100, 2.5% = 250",
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Duration": {
        "description": "Duration is a delta of time. You can add it to a BlockInfo or Expiration to move that further in the future. Note that an height-based Duration and a time-based Expiration cannot be combined",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "height"
            ],
            "properties": {
              "height": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Time in seconds",
            "type": "object",
            "required": [
              "time"
            ],
            "properties": {
              "time": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "ExpiryRange": {
        "type": "object",
        "required": [
          "max",
          "min"
        ],
        "properties": {
          "max": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "min": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "List an NFT on the marketplace by creating a new ask",
        "type": "object",
        "required": [
          "set_ask"
        ],
        "properties": {
          "set_ask": {
            "type": "object",
            "required": [
              "collection",
              "expires",
              "price",
              "sale_type",
              "token_id"
            ],
            "properties": {
              "collection": {
                "type": "string"
              },
              "expires": {
                "$ref": "#/definitions/Timestamp"
              },
              "finders_fee_bps": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              },
              "funds_recipient": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "price": {
                "$ref": "#/definitions/Coin"
              },
              "reserve_for": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "sale_type": {
                "$ref": "#/definitions/SaleType"
              },
              "token_id": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Remove an existing ask from the marketplace",
        "type": "object",
        "required": [
          "remove_ask"
        ],
        "properties": {
          "remove_ask": {
            "type": "object",
            "required": [
              "collection",
              "token_id"
            ],
            "properties": {
              "collection": {
                "type": "string"
              },
              "token_id": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Update the price of an existing ask",
        "type": "object",
        "required": [
          "update_ask_price"
        ],
        "properties": {
          "update_ask_price": {
            "type": "object",
            "required": [
              "collection",
              "price",
              "token_id"
            ],
            "properties": {
              "collection": {
                "type": "string"
              },
              "price": {
                "$ref": "#/definitions/Coin"
              },
              "token_id": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Place a bid on an existing ask",
        "type": "object",
        "required": [
          "set_bid"
        ],
        "properties": {
          "set_bid": {
            "type": "object",
            "required": [
              "collection",
              "expires",
              "sale_type",
              "token_id"
            ],
            "properties": {
              "collection": {
                "type": "string"
              },
              "expires": {
                "$ref": "#/definitions/Timestamp"
              },
              "finder": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "finders_fee_bps": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              },
              "sale_type": {
                "$ref": "#/definitions/SaleType"
              },
              "token_id": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "buy_now"
        ],
        "properties": {
          "buy_now": {
            "type": "object",
            "required": [
              "collection",
              "expires",
              "token_id"
            ],
            "properties": {
              "collection": {
                "type": "string"
              },
              "expires": {
                "$ref": "#/definitions/Timestamp"
              },
              "finder": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "finders_fee_bps": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              },
              "token_id": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Remove an existing bid from an ask",
        "type": "object",
        "required": [
          "remove_bid"
        ],
        "properties": {
          "remove_bid": {
            "type": "object",
            "required": [
              "collection",
              "token_id"
            ],
            "properties": {
              "collection": {
                "type": "string"
              },
              "token_id": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Accept a bid on an existing ask",
        "type": "object",
        "required": [
          "accept_bid"
        ],
        "properties": {
          "accept_bid": {
            "type": "object",
            "required": [
              "bidder",
              "collection",
              "token_id"
            ],
            "properties": {
              "bidder": {
                "type": "string"
              },
              "collection": {
                "type": "string"
              },
              "finder": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "token_id": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Reject a bid on an existing ask",
        "type": "object",
        "required": [
          "reject_bid"
        ],
        "properties": {
          "reject_bid": {
            "type": "object",
            "required": [
              "bidder",
              "collection",
              "token_id"
            ],
            "properties": {
              "bidder": {
                "type": "string"
              },
              "collection": {
                "type": "string"
              },
              "token_id": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Place a bid (limit order) across an entire collection",
        "type": "object",
        "required": [
          "set_collection_bid"
        ],
        "properties": {
          "set_collection_bid": {
            "type": "object",
            "required": [
              "collection",
              "expires"
            ],
            "properties": {
              "collection": {
                "type": "string"
              },
              "expires": {
                "$ref": "#/definitions/Timestamp"
              },
              "finders_fee_bps": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Remove a bid (limit order) across an entire collection",
        "type": "object",
        "required": [
          "remove_collection_bid"
        ],
        "properties": {
          "remove_collection_bid": {
            "type": "object",
            "required": [
              "collection"
            ],
            "properties": {
              "collection": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Accept a collection bid",
        "type": "object",
        "required": [
          "accept_collection_bid"
        ],
        "properties": {
          "accept_collection_bid": {
            "type": "object",
            "required": [
              "bidder",
              "collection",
              "token_id"
            ],
            "properties": {
              "bidder": {
                "type": "string"
              },
              "collection": {
                "type": "string"
              },
              "finder": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "token_id": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Privileged operation to change the active state of an ask when an NFT is transferred",
        "type": "object",
        "required": [
          "sync_ask"
        ],
        "properties": {
          "sync_ask": {
            "type": "object",
            "required": [
              "collection",
              "token_id"
            ],
            "properties": {
              "collection": {
                "type": "string"
              },
              "token_id": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Privileged operation to remove stale or invalid asks.",
        "type": "object",
        "required": [
          "remove_stale_ask"
        ],
        "properties": {
          "remove_stale_ask": {
            "type": "object",
            "required": [
              "collection",
              "token_id"
            ],
            "properties": {
              "collection": {
                "type": "string"
              },
              "token_id": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Privileged operation to remove stale bids",
        "type": "object",
        "required": [
          "remove_stale_bid"
        ],
        "properties": {
          "remove_stale_bid": {
            "type": "object",
            "required": [
              "bidder",
              "collection",
              "token_id"
            ],
            "properties": {
              "bidder": {
                "type": "string"
              },
              "collection": {
                "type": "string"
              },
              "token_id": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Privileged operation to remove stale collection bids",
        "type": "object",
        "required": [
          "remove_stale_collection_bid"
        ],
        "properties": {
          "remove_stale_collection_bid": {
            "type": "object",
            "required": [
              "bidder",
              "collection"
            ],
            "properties": {
              "bidder": {
                "type": "string"
              },
              "collection": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "SaleType": {
        "type": "string",
        "enum": [
          "fixed_price",
          "auction"
        ]
      },
      "Timestamp": {
        "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
        "allOf": [
          {
            "$ref": "#/definitions/Uint64"
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "description": "List of collections that have asks on them",
        "type": "object",
        "required": [
          "collections"
        ],
        "properties": {
          "collections": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get the current ask for specific NFT",
        "type": "object",
        "required": [
          "ask"
        ],
        "properties": {
          "ask": {
            "type": "object",
            "required": [
              "collection",
              "token_id"
            ],
            "properties": {
              "collection": {
                "type": "string"
              },
              "token_id": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get all asks for a collection",
        "type": "object",
        "required": [
          "asks"
        ],
        "properties": {
          "asks": {
            "type": "object",
            "required": [
              "collection"
            ],
            "properties": {
              "collection": {
                "type": "string"
              },
              "include_inactive": {
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get all asks for a collection in reverse",
        "type": "object",
        "required": [
          "reverse_asks"
        ],
        "properties": {
          "reverse_asks": {
            "type": "object",
            "required": [
              "collection"
            ],
            "properties": {
              "collection": {
                "type": "string"
              },
              "include_inactive": {
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_before": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get all asks for a collection, sorted by price",
        "type": "object",
        "required": [
          "asks_sorted_by_price"
        ],
        "properties": {
          "asks_sorted_by_price": {
            "type": "object",
            "required": [
              "collection"
            ],
            "properties": {
              "collection": {
                "type": "string"
              },
              "include_inactive": {
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/AskOffset"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get all asks for a collection, sorted by price in reverse",
        "type": "object",
        "required": [
          "reverse_asks_sorted_by_price"
        ],
        "properties": {
          "reverse_asks_sorted_by_price": {
            "type": "object",
            "required": [
              "collection"
            ],
            "properties": {
              "collection": {
                "type": "string"
              },
              "include_inactive": {
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_before": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/AskOffset"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Count of all asks",
        "type": "object",
        "required": [
          "ask_count"
        ],
        "properties": {
          "ask_count": {
            "type": "object",
            "required": [
              "collection"
            ],
            "properties": {
              "collection": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get all asks by seller",
        "type": "object",
        "required": [
          "asks_by_seller"
        ],
        "properties": {
          "asks_by_seller": {
            "type": "object",
            "required": [
              "seller"
            ],
            "properties": {
              "include_inactive": {
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "seller": {
                "type": "string"
              },
              "start_after": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/CollectionOffset"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get data for a specific bid",
        "type": "object",
        "required": [
          "bid"
        ],
        "properties": {
          "bid": {
            "type": "object",
            "required": [
              "bidder",
              "collection",
              "token_id"
            ],
            "properties": {
              "bidder": {
                "type": "string"
              },
              "collection": {
                "type": "string"
              },
              "token_id": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get all bids by a bidder",
        "type": "object",
        "required": [
          "bids_by_bidder"
        ],
        "properties": {
          "bids_by_bidder": {
            "type": "object",
            "required": [
              "bidder"
            ],
            "properties": {
              "bidder": {
                "type": "string"
              },
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/CollectionOffset"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get all bids by a bidder, sorted by expiration",
        "type": "object",
        "required": [
          "bids_by_bidder_sorted_by_expiration"
        ],
        "properties": {
          "bids_by_bidder_sorted_by_expiration": {
            "type": "object",
            "required": [
              "bidder"
            ],
            "properties": {
              "bidder": {
                "type": "string"
              },
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/CollectionOffset"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get all bids for a specific NFT",
        "type": "object",
        "required": [
          "bids"
        ],
        "properties": {
          "bids": {
            "type": "object",
            "required": [
              "collection",
              "token_id"
            ],
            "properties": {
              "collection": {
                "type": "string"
              },
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "token_id": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get all bids for a collection, sorted by price",
        "type": "object",
        "required": [
          "bids_sorted_by_price"
        ],
        "properties": {
          "bids_sorted_by_price": {
            "type": "object",
            "required": [
              "collection"
            ],
            "properties": {
              "collection": {
                "type": "string"
              },
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/BidOffset"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get all bids for a collection, sorted by price in reverse",
        "type": "object",
        "required": [
          "reverse_bids_sorted_by_price"
        ],
        "properties": {
          "reverse_bids_sorted_by_price": {
            "type": "object",
            "required": [
              "collection"
            ],
            "properties": {
              "collection": {
                "type": "string"
              },
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_before": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/BidOffset"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get data for a specific collection bid",
        "type": "object",
        "required": [
          "collection_bid"
        ],
        "properties": {
          "collection_bid": {
            "type": "object",
            "required": [
              "bidder",
              "collection"
            ],
            "properties": {
              "bidder": {
                "type": "string"
              },
              "collection": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get all collection bids by a bidder",
        "type": "object",
        "required": [
          "collection_bids_by_bidder"
        ],
        "properties": {
          "collection_bids_by_bidder": {
            "type": "object",
            "required": [
              "bidder"
            ],
            "properties": {
              "bidder": {
                "type": "string"
              },
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/CollectionOffset"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get all collection bids by a bidder, sorted by expiration",
        "type": "object",
        "required": [
          "collection_bids_by_bidder_sorted_by_expiration"
        ],
        "properties": {
          "collection_bids_by_bidder_sorted_by_expiration": {
            "type": "object",
            "required": [
              "bidder"
            ],
            "properties": {
              "bidder": {
                "type": "string"
              },
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/CollectionBidOffset"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get all collection bids for a collection sorted by price",
        "type": "object",
        "required": [
          "collection_bids_sorted_by_price"
        ],
        "properties": {
          "collection_bids_sorted_by_price": {
            "type": "object",
            "required": [
              "collection"
            ],
            "properties": {
              "collection": {
                "type": "string"
              },
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/CollectionBidOffset"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get all collection bids for a collection sorted by price in reverse",
        "type": "object",
        "required": [
          "reverse_collection_bids_sorted_by_price"
        ],
        "properties": {
          "reverse_collection_bids_sorted_by_price": {
            "type": "object",
            "required": [
              "collection"
            ],
            "properties": {
              "collection": {
                "type": "string"
              },
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_before": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/CollectionBidOffset"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Show all registered ask hooks",
        "type": "object",
        "required": [
          "ask_hooks"
        ],
        "properties": {
          "ask_hooks": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Show all registered bid hooks",
        "type": "object",
        "required": [
          "bid_hooks"
        ],
        "properties": {
          "bid_hooks": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Show all registered sale hooks",
        "type": "object",
        "required": [
          "sale_hooks"
        ],
        "properties": {
          "sale_hooks": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get the config for the contract",
        "type": "object",
        "required": [
          "params"
        ],
        "properties": {
          "params": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      },
      "AskOffset": {
        "description": "Offset for ask pagination",
        "type": "object",
        "required": [
          "price",
          "token_id"
        ],
        "properties": {
          "price": {
            "$ref": "#/definitions/Uint128"
          },
          "token_id": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "BidOffset": {
        "description": "Offset for bid pagination",
        "type": "object",
        "required": [
          "bidder",
          "price",
          "token_id"
        ],
        "properties": {
          "bidder": {
            "$ref": "#/definitions/Addr"
          },
          "price": {
            "$ref": "#/definitions/Uint128"
          },
          "token_id": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "CollectionBidOffset": {
        "description": "Offset for collection bid pagination",
        "type": "object",
        "required": [
          "bidder",
          "collection",
          "price"
        ],
        "properties": {
          "bidder": {
            "type": "string"
          },
          "collection": {
            "type": "string"
          },
          "price": {
            "$ref": "#/definitions/Uint128"
          }
        },
        "additionalProperties": false
      },
      "CollectionOffset": {
        "description": "Offset for collection pagination",
        "type": "object",
        "required": [
          "collection",
          "token_id"
        ],
        "properties": {
          "collection": {
            "type": "string"
          },
          "token_id": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "ask": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AsksResponse",
      "type": "object",
      "required": [
        "asks"
      ],
      "properties": {
        "asks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Ask"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Ask": {
          "description": "Represents an ask on the marketplace",
          "type": "object",
          "required": [
            "collection",
            "expires_at",
            "is_active",
            "price",
            "sale_type",
            "seller",
            "token_id"
          ],
          "properties": {
            "collection": {
              "$ref": "#/definitions/Addr"
            },
            "expires_at": {
              "$ref": "#/definitions/Timestamp"
            },
            "finders_fee_bps": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "funds_recipient": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Addr"
                },
                {
                  "type": "null"
                }
              ]
            },
            "is_active": {
              "type": "boolean"
            },
            "price": {
              "$ref": "#/definitions/Uint128"
            },
            "reserve_for": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Addr"
                },
                {
                  "type": "null"
                }
              ]
            },
            "sale_type": {
              "$ref": "#/definitions/SaleType"
            },
            "seller": {
              "$ref": "#/definitions/Addr"
            },
            "token_id": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "SaleType": {
          "type": "string",
          "enum": [
            "fixed_price",
            "auction"
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "ask_count": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AskCountResponse",
      "type": "object",
      "required": [
        "count"
      ],
      "properties": {
        "count": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "ask_hooks": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "HooksResponse",
      "type": "object",
      "required": [
        "hooks"
      ],
      "properties": {
        "hooks": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "asks": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AsksResponse",
      "type": "object",
      "required": [
        "asks"
      ],
      "properties": {
        "asks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Ask"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Ask": {
          "description": "Represents an ask on the marketplace",
          "type": "object",
          "required": [
            "collection",
            "expires_at",
            "is_active",
            "price",
            "sale_type",
            "seller",
            "token_id"
          ],
          "properties": {
            "collection": {
              "$ref": "#/definitions/Addr"
            },
            "expires_at": {
              "$ref": "#/definitions/Timestamp"
            },
            "finders_fee_bps": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "funds_recipient": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Addr"
                },
                {
                  "type": "null"
                }
              ]
            },
            "is_active": {
              "type": "boolean"
            },
            "price": {
              "$ref": "#/definitions/Uint128"
            },
            "reserve_for": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Addr"
                },
                {
                  "type": "null"
                }
              ]
            },
            "sale_type": {
              "$ref": "#/definitions/SaleType"
            },
            "seller": {
              "$ref": "#/definitions/Addr"
            },
            "token_id": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "SaleType": {
          "type": "string",
          "enum": [
            "fixed_price",
            "auction"
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "asks_by_seller": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AsksResponse",
      "type": "object",
      "required": [
        "asks"
      ],
      "properties": {
        "asks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Ask"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Ask": {
          "description": "Represents an ask on the marketplace",
          "type": "object",
          "required": [
            "collection",
            "expires_at",
            "is_active",
            "price",
            "sale_type",
            "seller",
            "token_id"
          ],
          "properties": {
            "collection": {
              "$ref": "#/definitions/Addr"
            },
            "expires_at": {
              "$ref": "#/definitions/Timestamp"
            },
            "finders_fee_bps": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "funds_recipient": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Addr"
                },
                {
                  "type": "null"
                }
              ]
            },
            "is_active": {
              "type": "boolean"
            },
            "price": {
              "$ref": "#/definitions/Uint128"
            },
            "reserve_for": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Addr"
                },
                {
                  "type": "null"
                }
              ]
            },
            "sale_type": {
              "$ref": "#/definitions/SaleType"
            },
            "seller": {
              "$ref": "#/definitions/Addr"
            },
            "token_id": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "SaleType": {
          "type": "string",
          "enum": [
            "fixed_price",
            "auction"
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "asks_sorted_by_price": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AsksResponse",
      "type": "object",
      "required": [
        "asks"
      ],
      "properties": {
        "asks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Ask"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Ask": {
          "description": "Represents an ask on the marketplace",
          "type": "object",
          "required": [
            "collection",
            "expires_at",
            "is_active",
            "price",
            "sale_type",
            "seller",
            "token_id"
          ],
          "properties": {
            "collection": {
              "$ref": "#/definitions/Addr"
            },
            "expires_at": {
              "$ref": "#/definitions/Timestamp"
            },
            "finders_fee_bps": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "funds_recipient": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Addr"
                },
                {
                  "type": "null"
                }
              ]
            },
            "is_active": {
              "type": "boolean"
            },
            "price": {
              "$ref": "#/definitions/Uint128"
            },
            "reserve_for": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Addr"
                },
                {
                  "type": "null"
                }
              ]
            },
            "sale_type": {
              "$ref": "#/definitions/SaleType"
            },
            "seller": {
              "$ref": "#/definitions/Addr"
            },
            "token_id": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "SaleType": {
          "type": "string",
          "enum": [
            "fixed_price",
            "auction"
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "bid": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "BidResponse",
      "type": "object",
      "properties": {
        "bid": {
          "anyOf": [
            {
              "$ref": "#/definitions/Bid"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Bid": {
          "description": "Represents a bid (offer) on the marketplace",
          "type": "object",
          "required": [
            "bidder",
            "collection",
            "expires_at",
            "price",
            "token_id"
          ],
          "properties": {
            "bidder": {
              "$ref": "#/definitions/Addr"
            },
            "collection": {
              "$ref": "#/definitions/Addr"
            },
            "expires_at": {
              "$ref": "#/definitions/Timestamp"
            },
            "finders_fee_bps": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "price": {
              "$ref": "#/definitions/Uint128"
            },
            "token_id": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "bid_hooks": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "HooksResponse",
      "type": "object",
      "required": [
        "hooks"
      ],
      "properties": {
        "hooks": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "bids": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "BidsResponse",
      "type": "object",
      "required": [
        "bids"
      ],
      "properties": {
        "bids": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Bid"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Bid": {
          "description": "Represents a bid (offer) on the marketplace",
          "type": "object",
          "required": [
            "bidder",
            "collection",
            "expires_at",
            "price",
            "token_id"
          ],
          "properties": {
            "bidder": {
              "$ref": "#/definitions/Addr"
            },
            "collection": {
              "$ref": "#/definitions/Addr"
            },
            "expires_at": {
              "$ref": "#/definitions/Timestamp"
            },
            "finders_fee_bps": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "price": {
              "$ref": "#/definitions/Uint128"
            },
            "token_id": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "bids_by_bidder": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "BidsResponse",
      "type": "object",
      "required": [
        "bids"
      ],
      "properties": {
        "bids": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Bid"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Bid": {
          "description": "Represents a bid (offer) on the marketplace",
          "type": "object",
          "required": [
            "bidder",
            "collection",
            "expires_at",
            "price",
            "token_id"
          ],
          "properties": {
            "bidder": {
              "$ref": "#/definitions/Addr"
            },
            "collection": {
              "$ref": "#/definitions/Addr"
            },
            "expires_at": {
              "$ref": "#/definitions/Timestamp"
            },
            "finders_fee_bps": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "price": {
              "$ref": "#/definitions/Uint128"
            },
            "token_id": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "bids_by_bidder_sorted_by_expiration": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "BidsResponse",
      "type": "object",
      "required": [
        "bids"
      ],
      "properties": {
        "bids": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Bid"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Bid": {
          "description": "Represents a bid (offer) on the marketplace",
          "type": "object",
          "required": [
            "bidder",
            "collection",
            "expires_at",
            "price",
            "token_id"
          ],
          "properties": {
            "bidder": {
              "$ref": "#/definitions/Addr"
            },
            "collection": {
              "$ref": "#/definitions/Addr"
            },
            "expires_at": {
              "$ref": "#/definitions/Timestamp"
            },
            "finders_fee_bps": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "price": {
              "$ref": "#/definitions/Uint128"
            },
            "token_id": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "bids_sorted_by_price": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "BidsResponse",
      "type": "object",
      "required": [
        "bids"
      ],
      "properties": {
        "bids": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Bid"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Bid": {
          "description": "Represents a bid (offer) on the marketplace",
          "type": "object",
          "required": [
            "bidder",
            "collection",
            "expires_at",
            "price",
            "token_id"
          ],
          "properties": {
            "bidder": {
              "$ref": "#/definitions/Addr"
            },
            "collection": {
              "$ref": "#/definitions/Addr"
            },
            "expires_at": {
              "$ref": "#/definitions/Timestamp"
            },
            "finders_fee_bps": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "price": {
              "$ref": "#/definitions/Uint128"
            },
            "token_id": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "collection_bid": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "CollectionBidResponse",
      "type": "object",
      "properties": {
        "bid": {
          "anyOf": [
            {
              "$ref": "#/definitions/CollectionBid"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "CollectionBid": {
          "description": "Represents a bid (offer) across an entire collection in the marketplace",
          "type": "object",
          "required": [
            "bidder",
            "collection",
            "expires_at",
            "price"
          ],
          "properties": {
            "bidder": {
              "$ref": "#/definitions/Addr"
            },
            "collection": {
              "$ref": "#/definitions/Addr"
            },
            "expires_at": {
              "$ref": "#/definitions/Timestamp"
            },
            "finders_fee_bps": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "price": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "collection_bids_by_bidder": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "CollectionBidResponse",
      "type": "object",
      "properties": {
        "bid": {
          "anyOf": [
            {
              "$ref": "#/definitions/CollectionBid"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "CollectionBid": {
          "description": "Represents a bid (offer) across an entire collection in the marketplace",
          "type": "object",
          "required": [
            "bidder",
            "collection",
            "expires_at",
            "price"
          ],
          "properties": {
            "bidder": {
              "$ref": "#/definitions/Addr"
            },
            "collection": {
              "$ref": "#/definitions/Addr"
            },
            "expires_at": {
              "$ref": "#/definitions/Timestamp"
            },
            "finders_fee_bps": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "price": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "collection_bids_by_bidder_sorted_by_expiration": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "CollectionBidResponse",
      "type": "object",
      "properties": {
        "bid": {
          "anyOf": [
            {
              "$ref": "#/definitions/CollectionBid"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "CollectionBid": {
          "description": "Represents a bid (offer) across an entire collection in the marketplace",
          "type": "object",
          "required": [
            "bidder",
            "collection",
            "expires_at",
            "price"
          ],
          "properties": {
            "bidder": {
              "$ref": "#/definitions/Addr"
            },
            "collection": {
              "$ref": "#/definitions/Addr"
            },
            "expires_at": {
              "$ref": "#/definitions/Timestamp"
            },
            "finders_fee_bps": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "price": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "collection_bids_sorted_by_price": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "CollectionBidResponse",
      "type": "object",
      "properties": {
        "bid": {
          "anyOf": [
            {
              "$ref": "#/definitions/CollectionBid"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "CollectionBid": {
          "description": "Represents a bid (offer) across an entire collection in the marketplace",
          "type": "object",
          "required": [
            "bidder",
            "collection",
            "expires_at",
            "price"
          ],
          "properties": {
            "bidder": {
              "$ref": "#/definitions/Addr"
            },
            "collection": {
              "$ref": "#/definitions/Addr"
            },
            "expires_at": {
              "$ref": "#/definitions/Timestamp"
            },
            "finders_fee_bps": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "price": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "collections": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "CollectionsResponse",
      "type": "object",
      "required": [
        "collections"
      ],
      "properties": {
        "collections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Addr"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        }
      }
    },
    "params": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ParamsResponse",
      "type": "object",
      "required": [
        "params"
      ],
      "properties": {
        "params": {
          "$ref": "#/definitions/SudoParams"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "Duration": {
          "description": "Duration is a delta of time. You can add it to a BlockInfo or Expiration to move that further in the future. Note that an height-based Duration and a time-based Expiration cannot be combined",
          "oneOf": [
            {
              "type": "object",
              "required": [
                "height"
              ],
              "properties": {
                "height": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Time in seconds",
              "type": "object",
              "required": [
                "time"
              ],
              "properties": {
                "time": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "ExpiryRange": {
          "type": "object",
          "required": [
            "max",
            "min"
          ],
          "properties": {
            "max": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "min": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "SudoParams": {
          "type": "object",
          "required": [
            "ask_expiry",
            "bid_expiry",
            "bid_removal_reward_percent",
            "listing_fee",
            "max_finders_fee_percent",
            "min_price",
            "operators",
            "stale_bid_duration",
            "trading_fee_percent"
          ],
          "properties": {
            "ask_expiry": {
              "description": "Valid time range for Asks (min, max) in seconds",
              "allOf": [
                {
                  "$ref": "#/definitions/ExpiryRange"
                }
              ]
            },
            "bid_expiry": {
              "description": "Valid time range for Bids (min, max) in seconds",
              "allOf": [
                {
                  "$ref": "#/definitions/ExpiryRange"
                }
              ]
            },
            "bid_removal_reward_percent": {
              "description": "Stale bid removal reward",
              "allOf": [
                {
                  "$ref": "#/definitions/Decimal"
                }
              ]
            },
            "listing_fee": {
              "description": "Listing fee to reduce spam",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "max_finders_fee_percent": {
              "description": "Max value for the finders fee",
              "allOf": [
                {
                  "$ref": "#/definitions/Decimal"
                }
              ]
            },
            "min_price": {
              "description": "Min value for a bid",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "operators": {
              "description": "Operators are entites that are responsible for maintaining the active state of Asks They listen to NFT transfer events, and update the active state of Asks",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Addr"
              }
            },
            "stale_bid_duration": {
              "description": "Duration after expiry when a bid becomes stale",
              "allOf": [
                {
                  "$ref": "#/definitions/Duration"
                }
              ]
            },
            "trading_fee_percent": {
              "description": "Fair Burn fee for winning bids",
              "allOf": [
                {
                  "$ref": "#/definitions/Decimal"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "reverse_asks": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AsksResponse",
      "type": "object",
      "required": [
        "asks"
      ],
      "properties": {
        "asks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Ask"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Ask": {
          "description": "Represents an ask on the marketplace",
          "type": "object",
          "required": [
            "collection",
            "expires_at",
            "is_active",
            "price",
            "sale_type",
            "seller",
            "token_id"
          ],
          "properties": {
            "collection": {
              "$ref": "#/definitions/Addr"
            },
            "expires_at": {
              "$ref": "#/definitions/Timestamp"
            },
            "finders_fee_bps": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "funds_recipient": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Addr"
                },
                {
                  "type": "null"
                }
              ]
            },
            "is_active": {
              "type": "boolean"
            },
            "price": {
              "$ref": "#/definitions/Uint128"
            },
            "reserve_for": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Addr"
                },
                {
                  "type": "null"
                }
              ]
            },
            "sale_type": {
              "$ref": "#/definitions/SaleType"
            },
            "seller": {
              "$ref": "#/definitions/Addr"
            },
            "token_id": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "SaleType": {
          "type": "string",
          "enum": [
            "fixed_price",
            "auction"
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "reverse_asks_sorted_by_price": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AsksResponse",
      "type": "object",
      "required": [
        "asks"
      ],
      "properties": {
        "asks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Ask"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Ask": {
          "description": "Represents an ask on the marketplace",
          "type": "object",
          "required": [
            "collection",
            "expires_at",
            "is_active",
            "price",
            "sale_type",
            "seller",
            "token_id"
          ],
          "properties": {
            "collection": {
              "$ref": "#/definitions/Addr"
            },
            "expires_at": {
              "$ref": "#/definitions/Timestamp"
            },
            "finders_fee_bps": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "funds_recipient": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Addr"
                },
                {
                  "type": "null"
                }
              ]
            },
            "is_active": {
              "type": "boolean"
            },
            "price": {
              "$ref": "#/definitions/Uint128"
            },
            "reserve_for": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Addr"
                },
                {
                  "type": "null"
                }
              ]
            },
            "sale_type": {
              "$ref": "#/definitions/SaleType"
            },
            "seller": {
              "$ref": "#/definitions/Addr"
            },
            "token_id": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "SaleType": {
          "type": "string",
          "enum": [
            "fixed_price",
            "auction"
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "reverse_bids_sorted_by_price": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "BidsResponse",
      "type": "object",
      "required": [
        "bids"
      ],
      "properties": {
        "bids": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Bid"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Bid": {
          "description": "Represents a bid (offer) on the marketplace",
          "type": "object",
          "required": [
            "bidder",
            "collection",
            "expires_at",
            "price",
            "token_id"
          ],
          "properties": {
            "bidder": {
              "$ref": "#/definitions/Addr"
            },
            "collection": {
              "$ref": "#/definitions/Addr"
            },
            "expires_at": {
              "$ref": "#/definitions/Timestamp"
            },
            "finders_fee_bps": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "price": {
              "$ref": "#/definitions/Uint128"
            },
            "token_id": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "reverse_collection_bids_sorted_by_price": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "CollectionBidResponse",
      "type": "object",
      "properties": {
        "bid": {
          "anyOf": [
            {
              "$ref": "#/definitions/CollectionBid"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "CollectionBid": {
          "description": "Represents a bid (offer) across an entire collection in the marketplace",
          "type": "object",
          "required": [
            "bidder",
            "collection",
            "expires_at",
            "price"
          ],
          "properties": {
            "bidder": {
              "$ref": "#/definitions/Addr"
            },
            "collection": {
              "$ref": "#/definitions/Addr"
            },
            "expires_at": {
              "$ref": "#/definitions/Timestamp"
            },
            "finders_fee_bps": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "price": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "sale_hooks": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "HooksResponse",
      "type": "object",
      "required": [
        "hooks"
      ],
      "properties": {
        "hooks": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    }
  }
}
