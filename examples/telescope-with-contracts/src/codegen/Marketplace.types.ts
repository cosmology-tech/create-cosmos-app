/**
* This file was automatically generated by @cosmwasm/ts-codegen@latest.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export type Uint128 = string;
export type Duration = {
  height: number;
} | {
  time: number;
};
export interface InstantiateMsg {
  ask_expiry: ExpiryRange;
  bid_expiry: ExpiryRange;
  bid_removal_reward_bps: number;
  listing_fee: Uint128;
  max_finders_fee_bps: number;
  min_price: Uint128;
  operators: string[];
  sale_hook?: string | null;
  stale_bid_duration: Duration;
  trading_fee_bps: number;
}
export interface ExpiryRange {
  max: number;
  min: number;
}
export type ExecuteMsg = {
  set_ask: {
    collection: string;
    expires: Timestamp;
    finders_fee_bps?: number | null;
    funds_recipient?: string | null;
    price: Coin;
    reserve_for?: string | null;
    sale_type: SaleType;
    token_id: number;
  };
} | {
  remove_ask: {
    collection: string;
    token_id: number;
  };
} | {
  update_ask_price: {
    collection: string;
    price: Coin;
    token_id: number;
  };
} | {
  set_bid: {
    collection: string;
    expires: Timestamp;
    finder?: string | null;
    finders_fee_bps?: number | null;
    sale_type: SaleType;
    token_id: number;
  };
} | {
  buy_now: {
    collection: string;
    expires: Timestamp;
    finder?: string | null;
    finders_fee_bps?: number | null;
    token_id: number;
  };
} | {
  remove_bid: {
    collection: string;
    token_id: number;
  };
} | {
  accept_bid: {
    bidder: string;
    collection: string;
    finder?: string | null;
    token_id: number;
  };
} | {
  reject_bid: {
    bidder: string;
    collection: string;
    token_id: number;
  };
} | {
  set_collection_bid: {
    collection: string;
    expires: Timestamp;
    finders_fee_bps?: number | null;
  };
} | {
  remove_collection_bid: {
    collection: string;
  };
} | {
  accept_collection_bid: {
    bidder: string;
    collection: string;
    finder?: string | null;
    token_id: number;
  };
} | {
  sync_ask: {
    collection: string;
    token_id: number;
  };
} | {
  remove_stale_ask: {
    collection: string;
    token_id: number;
  };
} | {
  remove_stale_bid: {
    bidder: string;
    collection: string;
    token_id: number;
  };
} | {
  remove_stale_collection_bid: {
    bidder: string;
    collection: string;
  };
};
export type Timestamp = Uint64;
export type Uint64 = string;
export type SaleType = "fixed_price" | "auction";
export interface Coin {
  amount: Uint128;
  denom: string;
  [k: string]: unknown;
}
export type QueryMsg = {
  collections: {
    limit?: number | null;
    start_after?: string | null;
  };
} | {
  ask: {
    collection: string;
    token_id: number;
  };
} | {
  asks: {
    collection: string;
    include_inactive?: boolean | null;
    limit?: number | null;
    start_after?: number | null;
  };
} | {
  reverse_asks: {
    collection: string;
    include_inactive?: boolean | null;
    limit?: number | null;
    start_before?: number | null;
  };
} | {
  asks_sorted_by_price: {
    collection: string;
    include_inactive?: boolean | null;
    limit?: number | null;
    start_after?: AskOffset | null;
  };
} | {
  reverse_asks_sorted_by_price: {
    collection: string;
    include_inactive?: boolean | null;
    limit?: number | null;
    start_before?: AskOffset | null;
  };
} | {
  ask_count: {
    collection: string;
  };
} | {
  asks_by_seller: {
    include_inactive?: boolean | null;
    limit?: number | null;
    seller: string;
    start_after?: CollectionOffset | null;
  };
} | {
  bid: {
    bidder: string;
    collection: string;
    token_id: number;
  };
} | {
  bids_by_bidder: {
    bidder: string;
    limit?: number | null;
    start_after?: CollectionOffset | null;
  };
} | {
  bids_by_bidder_sorted_by_expiration: {
    bidder: string;
    limit?: number | null;
    start_after?: CollectionOffset | null;
  };
} | {
  bids: {
    collection: string;
    limit?: number | null;
    start_after?: string | null;
    token_id: number;
  };
} | {
  bids_sorted_by_price: {
    collection: string;
    limit?: number | null;
    start_after?: BidOffset | null;
  };
} | {
  reverse_bids_sorted_by_price: {
    collection: string;
    limit?: number | null;
    start_before?: BidOffset | null;
  };
} | {
  collection_bid: {
    bidder: string;
    collection: string;
  };
} | {
  collection_bids_by_bidder: {
    bidder: string;
    limit?: number | null;
    start_after?: CollectionOffset | null;
  };
} | {
  collection_bids_by_bidder_sorted_by_expiration: {
    bidder: string;
    limit?: number | null;
    start_after?: CollectionBidOffset | null;
  };
} | {
  collection_bids_sorted_by_price: {
    collection: string;
    limit?: number | null;
    start_after?: CollectionBidOffset | null;
  };
} | {
  reverse_collection_bids_sorted_by_price: {
    collection: string;
    limit?: number | null;
    start_before?: CollectionBidOffset | null;
  };
} | {
  ask_hooks: {};
} | {
  bid_hooks: {};
} | {
  sale_hooks: {};
} | {
  params: {};
};
export type Addr = string;
export interface AskOffset {
  price: Uint128;
  token_id: number;
}
export interface CollectionOffset {
  collection: string;
  token_id: number;
}
export interface BidOffset {
  bidder: Addr;
  price: Uint128;
  token_id: number;
}
export interface CollectionBidOffset {
  bidder: string;
  collection: string;
  price: Uint128;
}
export interface AsksResponse {
  asks: Ask[];
}
export interface Ask {
  collection: Addr;
  expires_at: Timestamp;
  finders_fee_bps?: number | null;
  funds_recipient?: Addr | null;
  is_active: boolean;
  price: Uint128;
  reserve_for?: Addr | null;
  sale_type: SaleType;
  seller: Addr;
  token_id: number;
}
export interface AskCountResponse {
  count: number;
}
export interface HooksResponse {
  hooks: string[];
}
export interface BidResponse {
  bid?: Bid | null;
}
export interface Bid {
  bidder: Addr;
  collection: Addr;
  expires_at: Timestamp;
  finders_fee_bps?: number | null;
  price: Uint128;
  token_id: number;
}
export interface BidsResponse {
  bids: Bid[];
}
export interface CollectionBidResponse {
  bid?: CollectionBid | null;
}
export interface CollectionBid {
  bidder: Addr;
  collection: Addr;
  expires_at: Timestamp;
  finders_fee_bps?: number | null;
  price: Uint128;
}
export interface CollectionsResponse {
  collections: Addr[];
}
export type Decimal = string;
export interface ParamsResponse {
  params: SudoParams;
}
export interface SudoParams {
  ask_expiry: ExpiryRange;
  bid_expiry: ExpiryRange;
  bid_removal_reward_percent: Decimal;
  listing_fee: Uint128;
  max_finders_fee_percent: Decimal;
  min_price: Uint128;
  operators: Addr[];
  stale_bid_duration: Duration;
  trading_fee_percent: Decimal;
}