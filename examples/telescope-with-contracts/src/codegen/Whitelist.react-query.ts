/**
* This file was automatically generated by @cosmwasm/ts-codegen@latest.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery } from "react-query";
import { AdminListResponse, CanExecuteResponse, Timestamp, Uint64, Uint128, ConfigResponse, Coin, Config, ExecuteMsg, AddMembersMsg, RemoveMembersMsg, HasEndedResponse, HasMemberResponse, HasStartedResponse, InstantiateMsg, IsActiveResponse, MembersResponse, QueryMsg, CosmosMsgForEmpty, BankMsg, WasmMsg, Binary, Empty } from "./Whitelist.types";
import { WhitelistQueryClient } from "./Whitelist.client";
export interface WhitelistReactQuery<TResponse, TData = TResponse> {
  client: WhitelistQueryClient;
  options?: UseQueryOptions<TResponse, Error, TData>;
}
export interface WhitelistCanExecuteQuery<TData> extends WhitelistReactQuery<CanExecuteResponse, TData> {
  args: {
    msg: CosmosMsgForEmpty;
    sender: string;
  };
}
export function useWhitelistCanExecuteQuery<TData = CanExecuteResponse>({
  client,
  args,
  options
}: WhitelistCanExecuteQuery<TData>) {
  return useQuery<CanExecuteResponse, Error, TData>(["whitelistCanExecute", client.contractAddress, JSON.stringify(args)], () => client.canExecute({
    msg: args.msg,
    sender: args.sender
  }), options);
}
export interface WhitelistAdminListQuery<TData> extends WhitelistReactQuery<AdminListResponse, TData> {}
export function useWhitelistAdminListQuery<TData = AdminListResponse>({
  client,
  options
}: WhitelistAdminListQuery<TData>) {
  return useQuery<AdminListResponse, Error, TData>(["whitelistAdminList", client.contractAddress], () => client.adminList(), options);
}
export interface WhitelistConfigQuery<TData> extends WhitelistReactQuery<ConfigResponse, TData> {}
export function useWhitelistConfigQuery<TData = ConfigResponse>({
  client,
  options
}: WhitelistConfigQuery<TData>) {
  return useQuery<ConfigResponse, Error, TData>(["whitelistConfig", client.contractAddress], () => client.config(), options);
}
export interface WhitelistHasMemberQuery<TData> extends WhitelistReactQuery<HasMemberResponse, TData> {
  args: {
    member: string;
  };
}
export function useWhitelistHasMemberQuery<TData = HasMemberResponse>({
  client,
  args,
  options
}: WhitelistHasMemberQuery<TData>) {
  return useQuery<HasMemberResponse, Error, TData>(["whitelistHasMember", client.contractAddress, JSON.stringify(args)], () => client.hasMember({
    member: args.member
  }), options);
}
export interface WhitelistMembersQuery<TData> extends WhitelistReactQuery<MembersResponse, TData> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useWhitelistMembersQuery<TData = MembersResponse>({
  client,
  args,
  options
}: WhitelistMembersQuery<TData>) {
  return useQuery<MembersResponse, Error, TData>(["whitelistMembers", client.contractAddress, JSON.stringify(args)], () => client.members({
    limit: args.limit,
    startAfter: args.startAfter
  }), options);
}
export interface WhitelistIsActiveQuery<TData> extends WhitelistReactQuery<IsActiveResponse, TData> {}
export function useWhitelistIsActiveQuery<TData = IsActiveResponse>({
  client,
  options
}: WhitelistIsActiveQuery<TData>) {
  return useQuery<IsActiveResponse, Error, TData>(["whitelistIsActive", client.contractAddress], () => client.isActive(), options);
}
export interface WhitelistHasEndedQuery<TData> extends WhitelistReactQuery<HasEndedResponse, TData> {}
export function useWhitelistHasEndedQuery<TData = HasEndedResponse>({
  client,
  options
}: WhitelistHasEndedQuery<TData>) {
  return useQuery<HasEndedResponse, Error, TData>(["whitelistHasEnded", client.contractAddress], () => client.hasEnded(), options);
}
export interface WhitelistHasStartedQuery<TData> extends WhitelistReactQuery<HasStartedResponse, TData> {}
export function useWhitelistHasStartedQuery<TData = HasStartedResponse>({
  client,
  options
}: WhitelistHasStartedQuery<TData>) {
  return useQuery<HasStartedResponse, Error, TData>(["whitelistHasStarted", client.contractAddress], () => client.hasStarted(), options);
}