/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { AdminListResponse, CanExecuteResponse, Timestamp, Uint64, Uint128, ConfigResponse, Coin, Config, ExecuteMsg, AddMembersMsg, RemoveMembersMsg, HasEndedResponse, HasMemberResponse, HasStartedResponse, InstantiateMsg, IsActiveResponse, MembersResponse, QueryMsg, CosmosMsgForEmpty, BankMsg, WasmMsg, Binary, Empty } from "./Whitelist.types";
export interface WhitelistMessage {
  contractAddress: string;
  sender: string;
  updateStartTime: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateEndTime: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  addMembers: ({
    toAdd
  }: {
    toAdd: string[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  removeMembers: ({
    toRemove
  }: {
    toRemove: string[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updatePerAddressLimit: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  increaseMemberLimit: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateAdmins: ({
    admins
  }: {
    admins: string[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  freeze: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class WhitelistMessageComposer implements WhitelistMessage {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateStartTime = this.updateStartTime.bind(this);
    this.updateEndTime = this.updateEndTime.bind(this);
    this.addMembers = this.addMembers.bind(this);
    this.removeMembers = this.removeMembers.bind(this);
    this.updatePerAddressLimit = this.updatePerAddressLimit.bind(this);
    this.increaseMemberLimit = this.increaseMemberLimit.bind(this);
    this.updateAdmins = this.updateAdmins.bind(this);
    this.freeze = this.freeze.bind(this);
  }

  updateStartTime = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_start_time: {}
        })),
        funds: _funds
      })
    };
  };
  updateEndTime = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_end_time: {}
        })),
        funds: _funds
      })
    };
  };
  addMembers = ({
    toAdd
  }: {
    toAdd: string[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          add_members: {
            to_add: toAdd
          }
        })),
        funds: _funds
      })
    };
  };
  removeMembers = ({
    toRemove
  }: {
    toRemove: string[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          remove_members: {
            to_remove: toRemove
          }
        })),
        funds: _funds
      })
    };
  };
  updatePerAddressLimit = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_per_address_limit: {}
        })),
        funds: _funds
      })
    };
  };
  increaseMemberLimit = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          increase_member_limit: {}
        })),
        funds: _funds
      })
    };
  };
  updateAdmins = ({
    admins
  }: {
    admins: string[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_admins: {
            admins
          }
        })),
        funds: _funds
      })
    };
  };
  freeze = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          freeze: {}
        })),
        funds: _funds
      })
    };
  };
}