/**
* This file was automatically generated by @cosmwasm/ts-codegen@latest.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery } from "react-query";
import { Uint128, Duration, InstantiateMsg, ExpiryRange, ExecuteMsg, Timestamp, Uint64, SaleType, Coin, QueryMsg, Addr, AskOffset, CollectionOffset, BidOffset, CollectionBidOffset, AsksResponse, Ask, AskCountResponse, HooksResponse, BidResponse, Bid, BidsResponse, CollectionBidResponse, CollectionBid, CollectionsResponse, Decimal, ParamsResponse, SudoParams } from "./Marketplace.types";
import { MarketplaceQueryClient } from "./Marketplace.client";
export interface MarketplaceReactQuery<TResponse, TData = TResponse> {
  client: MarketplaceQueryClient;
  options?: UseQueryOptions<TResponse, Error, TData>;
}
export interface MarketplaceParamsQuery<TData> extends MarketplaceReactQuery<ParamsResponse, TData> {}
export function useMarketplaceParamsQuery<TData = ParamsResponse>({
  client,
  options
}: MarketplaceParamsQuery<TData>) {
  return useQuery<ParamsResponse, Error, TData>(["marketplaceParams", client.contractAddress], () => client.params(), options);
}
export interface MarketplaceSaleHooksQuery<TData> extends MarketplaceReactQuery<HooksResponse, TData> {}
export function useMarketplaceSaleHooksQuery<TData = HooksResponse>({
  client,
  options
}: MarketplaceSaleHooksQuery<TData>) {
  return useQuery<HooksResponse, Error, TData>(["marketplaceSaleHooks", client.contractAddress], () => client.saleHooks(), options);
}
export interface MarketplaceBidHooksQuery<TData> extends MarketplaceReactQuery<HooksResponse, TData> {}
export function useMarketplaceBidHooksQuery<TData = HooksResponse>({
  client,
  options
}: MarketplaceBidHooksQuery<TData>) {
  return useQuery<HooksResponse, Error, TData>(["marketplaceBidHooks", client.contractAddress], () => client.bidHooks(), options);
}
export interface MarketplaceAskHooksQuery<TData> extends MarketplaceReactQuery<HooksResponse, TData> {}
export function useMarketplaceAskHooksQuery<TData = HooksResponse>({
  client,
  options
}: MarketplaceAskHooksQuery<TData>) {
  return useQuery<HooksResponse, Error, TData>(["marketplaceAskHooks", client.contractAddress], () => client.askHooks(), options);
}
export interface MarketplaceReverseCollectionBidsSortedByPriceQuery<TData> extends MarketplaceReactQuery<CollectionBidResponse, TData> {
  args: {
    collection: string;
    limit?: number;
    startBefore?: CollectionBidOffset;
  };
}
export function useMarketplaceReverseCollectionBidsSortedByPriceQuery<TData = CollectionBidResponse>({
  client,
  args,
  options
}: MarketplaceReverseCollectionBidsSortedByPriceQuery<TData>) {
  return useQuery<CollectionBidResponse, Error, TData>(["marketplaceReverseCollectionBidsSortedByPrice", client.contractAddress, JSON.stringify(args)], () => client.reverseCollectionBidsSortedByPrice({
    collection: args.collection,
    limit: args.limit,
    startBefore: args.startBefore
  }), options);
}
export interface MarketplaceCollectionBidsSortedByPriceQuery<TData> extends MarketplaceReactQuery<CollectionBidResponse, TData> {
  args: {
    collection: string;
    limit?: number;
    startAfter?: CollectionBidOffset;
  };
}
export function useMarketplaceCollectionBidsSortedByPriceQuery<TData = CollectionBidResponse>({
  client,
  args,
  options
}: MarketplaceCollectionBidsSortedByPriceQuery<TData>) {
  return useQuery<CollectionBidResponse, Error, TData>(["marketplaceCollectionBidsSortedByPrice", client.contractAddress, JSON.stringify(args)], () => client.collectionBidsSortedByPrice({
    collection: args.collection,
    limit: args.limit,
    startAfter: args.startAfter
  }), options);
}
export interface MarketplaceCollectionBidsByBidderSortedByExpirationQuery<TData> extends MarketplaceReactQuery<CollectionBidResponse, TData> {
  args: {
    bidder: string;
    limit?: number;
    startAfter?: CollectionBidOffset;
  };
}
export function useMarketplaceCollectionBidsByBidderSortedByExpirationQuery<TData = CollectionBidResponse>({
  client,
  args,
  options
}: MarketplaceCollectionBidsByBidderSortedByExpirationQuery<TData>) {
  return useQuery<CollectionBidResponse, Error, TData>(["marketplaceCollectionBidsByBidderSortedByExpiration", client.contractAddress, JSON.stringify(args)], () => client.collectionBidsByBidderSortedByExpiration({
    bidder: args.bidder,
    limit: args.limit,
    startAfter: args.startAfter
  }), options);
}
export interface MarketplaceCollectionBidsByBidderQuery<TData> extends MarketplaceReactQuery<CollectionBidResponse, TData> {
  args: {
    bidder: string;
    limit?: number;
    startAfter?: CollectionOffset;
  };
}
export function useMarketplaceCollectionBidsByBidderQuery<TData = CollectionBidResponse>({
  client,
  args,
  options
}: MarketplaceCollectionBidsByBidderQuery<TData>) {
  return useQuery<CollectionBidResponse, Error, TData>(["marketplaceCollectionBidsByBidder", client.contractAddress, JSON.stringify(args)], () => client.collectionBidsByBidder({
    bidder: args.bidder,
    limit: args.limit,
    startAfter: args.startAfter
  }), options);
}
export interface MarketplaceCollectionBidQuery<TData> extends MarketplaceReactQuery<CollectionBidResponse, TData> {
  args: {
    bidder: string;
    collection: string;
  };
}
export function useMarketplaceCollectionBidQuery<TData = CollectionBidResponse>({
  client,
  args,
  options
}: MarketplaceCollectionBidQuery<TData>) {
  return useQuery<CollectionBidResponse, Error, TData>(["marketplaceCollectionBid", client.contractAddress, JSON.stringify(args)], () => client.collectionBid({
    bidder: args.bidder,
    collection: args.collection
  }), options);
}
export interface MarketplaceReverseBidsSortedByPriceQuery<TData> extends MarketplaceReactQuery<BidsResponse, TData> {
  args: {
    collection: string;
    limit?: number;
    startBefore?: BidOffset;
  };
}
export function useMarketplaceReverseBidsSortedByPriceQuery<TData = BidsResponse>({
  client,
  args,
  options
}: MarketplaceReverseBidsSortedByPriceQuery<TData>) {
  return useQuery<BidsResponse, Error, TData>(["marketplaceReverseBidsSortedByPrice", client.contractAddress, JSON.stringify(args)], () => client.reverseBidsSortedByPrice({
    collection: args.collection,
    limit: args.limit,
    startBefore: args.startBefore
  }), options);
}
export interface MarketplaceBidsSortedByPriceQuery<TData> extends MarketplaceReactQuery<BidsResponse, TData> {
  args: {
    collection: string;
    limit?: number;
    startAfter?: BidOffset;
  };
}
export function useMarketplaceBidsSortedByPriceQuery<TData = BidsResponse>({
  client,
  args,
  options
}: MarketplaceBidsSortedByPriceQuery<TData>) {
  return useQuery<BidsResponse, Error, TData>(["marketplaceBidsSortedByPrice", client.contractAddress, JSON.stringify(args)], () => client.bidsSortedByPrice({
    collection: args.collection,
    limit: args.limit,
    startAfter: args.startAfter
  }), options);
}
export interface MarketplaceBidsQuery<TData> extends MarketplaceReactQuery<BidsResponse, TData> {
  args: {
    collection: string;
    limit?: number;
    startAfter?: string;
    tokenId: number;
  };
}
export function useMarketplaceBidsQuery<TData = BidsResponse>({
  client,
  args,
  options
}: MarketplaceBidsQuery<TData>) {
  return useQuery<BidsResponse, Error, TData>(["marketplaceBids", client.contractAddress, JSON.stringify(args)], () => client.bids({
    collection: args.collection,
    limit: args.limit,
    startAfter: args.startAfter,
    tokenId: args.tokenId
  }), options);
}
export interface MarketplaceBidsByBidderSortedByExpirationQuery<TData> extends MarketplaceReactQuery<BidsResponse, TData> {
  args: {
    bidder: string;
    limit?: number;
    startAfter?: CollectionOffset;
  };
}
export function useMarketplaceBidsByBidderSortedByExpirationQuery<TData = BidsResponse>({
  client,
  args,
  options
}: MarketplaceBidsByBidderSortedByExpirationQuery<TData>) {
  return useQuery<BidsResponse, Error, TData>(["marketplaceBidsByBidderSortedByExpiration", client.contractAddress, JSON.stringify(args)], () => client.bidsByBidderSortedByExpiration({
    bidder: args.bidder,
    limit: args.limit,
    startAfter: args.startAfter
  }), options);
}
export interface MarketplaceBidsByBidderQuery<TData> extends MarketplaceReactQuery<BidsResponse, TData> {
  args: {
    bidder: string;
    limit?: number;
    startAfter?: CollectionOffset;
  };
}
export function useMarketplaceBidsByBidderQuery<TData = BidsResponse>({
  client,
  args,
  options
}: MarketplaceBidsByBidderQuery<TData>) {
  return useQuery<BidsResponse, Error, TData>(["marketplaceBidsByBidder", client.contractAddress, JSON.stringify(args)], () => client.bidsByBidder({
    bidder: args.bidder,
    limit: args.limit,
    startAfter: args.startAfter
  }), options);
}
export interface MarketplaceBidQuery<TData> extends MarketplaceReactQuery<BidResponse, TData> {
  args: {
    bidder: string;
    collection: string;
    tokenId: number;
  };
}
export function useMarketplaceBidQuery<TData = BidResponse>({
  client,
  args,
  options
}: MarketplaceBidQuery<TData>) {
  return useQuery<BidResponse, Error, TData>(["marketplaceBid", client.contractAddress, JSON.stringify(args)], () => client.bid({
    bidder: args.bidder,
    collection: args.collection,
    tokenId: args.tokenId
  }), options);
}
export interface MarketplaceAsksBySellerQuery<TData> extends MarketplaceReactQuery<AsksResponse, TData> {
  args: {
    includeInactive?: boolean;
    limit?: number;
    seller: string;
    startAfter?: CollectionOffset;
  };
}
export function useMarketplaceAsksBySellerQuery<TData = AsksResponse>({
  client,
  args,
  options
}: MarketplaceAsksBySellerQuery<TData>) {
  return useQuery<AsksResponse, Error, TData>(["marketplaceAsksBySeller", client.contractAddress, JSON.stringify(args)], () => client.asksBySeller({
    includeInactive: args.includeInactive,
    limit: args.limit,
    seller: args.seller,
    startAfter: args.startAfter
  }), options);
}
export interface MarketplaceAskCountQuery<TData> extends MarketplaceReactQuery<AskCountResponse, TData> {
  args: {
    collection: string;
  };
}
export function useMarketplaceAskCountQuery<TData = AskCountResponse>({
  client,
  args,
  options
}: MarketplaceAskCountQuery<TData>) {
  return useQuery<AskCountResponse, Error, TData>(["marketplaceAskCount", client.contractAddress, JSON.stringify(args)], () => client.askCount({
    collection: args.collection
  }), options);
}
export interface MarketplaceReverseAsksSortedByPriceQuery<TData> extends MarketplaceReactQuery<AsksResponse, TData> {
  args: {
    collection: string;
    includeInactive?: boolean;
    limit?: number;
    startBefore?: AskOffset;
  };
}
export function useMarketplaceReverseAsksSortedByPriceQuery<TData = AsksResponse>({
  client,
  args,
  options
}: MarketplaceReverseAsksSortedByPriceQuery<TData>) {
  return useQuery<AsksResponse, Error, TData>(["marketplaceReverseAsksSortedByPrice", client.contractAddress, JSON.stringify(args)], () => client.reverseAsksSortedByPrice({
    collection: args.collection,
    includeInactive: args.includeInactive,
    limit: args.limit,
    startBefore: args.startBefore
  }), options);
}
export interface MarketplaceAsksSortedByPriceQuery<TData> extends MarketplaceReactQuery<AsksResponse, TData> {
  args: {
    collection: string;
    includeInactive?: boolean;
    limit?: number;
    startAfter?: AskOffset;
  };
}
export function useMarketplaceAsksSortedByPriceQuery<TData = AsksResponse>({
  client,
  args,
  options
}: MarketplaceAsksSortedByPriceQuery<TData>) {
  return useQuery<AsksResponse, Error, TData>(["marketplaceAsksSortedByPrice", client.contractAddress, JSON.stringify(args)], () => client.asksSortedByPrice({
    collection: args.collection,
    includeInactive: args.includeInactive,
    limit: args.limit,
    startAfter: args.startAfter
  }), options);
}
export interface MarketplaceReverseAsksQuery<TData> extends MarketplaceReactQuery<AsksResponse, TData> {
  args: {
    collection: string;
    includeInactive?: boolean;
    limit?: number;
    startBefore?: number;
  };
}
export function useMarketplaceReverseAsksQuery<TData = AsksResponse>({
  client,
  args,
  options
}: MarketplaceReverseAsksQuery<TData>) {
  return useQuery<AsksResponse, Error, TData>(["marketplaceReverseAsks", client.contractAddress, JSON.stringify(args)], () => client.reverseAsks({
    collection: args.collection,
    includeInactive: args.includeInactive,
    limit: args.limit,
    startBefore: args.startBefore
  }), options);
}
export interface MarketplaceAsksQuery<TData> extends MarketplaceReactQuery<AsksResponse, TData> {
  args: {
    collection: string;
    includeInactive?: boolean;
    limit?: number;
    startAfter?: number;
  };
}
export function useMarketplaceAsksQuery<TData = AsksResponse>({
  client,
  args,
  options
}: MarketplaceAsksQuery<TData>) {
  return useQuery<AsksResponse, Error, TData>(["marketplaceAsks", client.contractAddress, JSON.stringify(args)], () => client.asks({
    collection: args.collection,
    includeInactive: args.includeInactive,
    limit: args.limit,
    startAfter: args.startAfter
  }), options);
}
export interface MarketplaceAskQuery<TData> extends MarketplaceReactQuery<AsksResponse, TData> {
  args: {
    collection: string;
    tokenId: number;
  };
}
export function useMarketplaceAskQuery<TData = AsksResponse>({
  client,
  args,
  options
}: MarketplaceAskQuery<TData>) {
  return useQuery<AsksResponse, Error, TData>(["marketplaceAsk", client.contractAddress, JSON.stringify(args)], () => client.ask({
    collection: args.collection,
    tokenId: args.tokenId
  }), options);
}
export interface MarketplaceCollectionsQuery<TData> extends MarketplaceReactQuery<CollectionsResponse, TData> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useMarketplaceCollectionsQuery<TData = CollectionsResponse>({
  client,
  args,
  options
}: MarketplaceCollectionsQuery<TData>) {
  return useQuery<CollectionsResponse, Error, TData>(["marketplaceCollections", client.contractAddress, JSON.stringify(args)], () => client.collections({
    limit: args.limit,
    startAfter: args.startAfter
  }), options);
}