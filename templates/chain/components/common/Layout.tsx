import Head from "next/head";
import { createContext, useState } from "react";
import { Box, Container } from "@interchain-ui/react";
import { Header } from "./Header";
import { Footer } from "./Footer";
import { Sidebar } from "./Sidebar";
import { CHAIN_NAME, CHAIN_NAME_STORAGE_KEY } from "@/config";

export const ChainContext = createContext({
  chainName: "",
});

export function Layout({ children }: { children?: React.ReactNode }) {
  const [chainName, setChainName] = useState(CHAIN_NAME);
  const [showSidebar, setShowSidebar] = useState(false);

  function onChainChange(chainName?: string) {
    if (chainName) {
      setChainName(chainName!);
      localStorage.setItem(CHAIN_NAME_STORAGE_KEY, chainName);
    }
  }

  return (
    // @ts-ignore
    <ChainContext.Provider value={{ chainName }}>
      <Container attributes={{ px: 0 }}>
        <Head>
          <title>Create Cosmos App</title>
          <meta name="description" content="Generated by create cosmos app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <Box display="flex" minHeight="100vh">
          <Box display={{ mobile: "none", desktop: "block" }}>
            <Sidebar show={true} border={true} chainName={chainName} />
          </Box>
          <Box
            zIndex="5"
            width={showSidebar ? "100vw" : "0"}
            height="100vh"
            position="fixed"
            backgroundColor="$blackAlpha500"
            display={{ mobile: "flex", desktop: "none" }}
          >
            <Sidebar show={showSidebar} chainName={chainName} />
            <Box
              flex="1"
              height="$full"
              attributes={{
                onClick: () => setShowSidebar(false),
              }}
            >
            </Box>
          </Box>
          <Box flex="1">
            <Header
              chainName={chainName}
              onChainChange={onChainChange}
              onMoreButtonClick={() => setShowSidebar(true)}
            />
            <Box pl={{ desktop: "$6" }}>
              {children}
            </Box>
            <Footer
              chainName={chainName}
              onChainChange={onChainChange}
            />
          </Box>
        </Box>
      </Container>
    </ChainContext.Provider>
  );
}
